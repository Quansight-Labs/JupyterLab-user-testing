name: deploy

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  retrieve-secret:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Retrieve secret from Vault
        uses: hashicorp/vault-action@v2.5.0
        with:
          method: jwt
          url: "https://quansight-public-vault-fe415d04.c219cf75.z1.hashicorp.cloud:8200"
          namespace: "admin/quansight"
          role: "repository-quansight-labs-jupyterlab-user-testing-role"
          secrets: |
            kv/data/repository/Quansight-Labs/JupyterLab-user-testing/shared_secrets TF_API_TOKEN | TF_API_TOKEN;
            kv/data/repository/Quansight-Labs/JupyterLab-user-testing/google_cloud_platform/quansight-jlab-a11y/github project_id | PROJECT_ID;
            kv/data/repository/Quansight-Labs/JupyterLab-user-testing/google_cloud_platform/quansight-jlab-a11y/github workload_identity_provider | GCP_WORKFLOW_PROVIDER;
            kv/data/repository/Quansight-Labs/JupyterLab-user-testing/google_cloud_platform/quansight-jlab-a11y/github service_account_name | GCP_SERVICE_ACCOUNT;
            kv/data/repository/Quansight-Labs/JupyterLab-user-testing/cloudflare/internal-devops@quansight.com/github-quansight-jupyterlab-accesibility-tljh token | CLOUDFLARE_API_TOKEN;

      - name: 'Authenticate to GCP'
        uses: 'google-github-actions/auth@v1'
        with:
          create_credentials_file: 'true'
          workload_identity_provider: ${{ env.GCP_WORKFLOW_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.3.7"
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
